"""initial_unified_schema

Revision ID: 529d572a4609
Revises: 
Create Date: 2025-09-28 18:45:52.594943

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel import SQLModel
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '529d572a4609'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_user',
    sa.Column('app_user_id', sa.UUID(), nullable=False),
    sa.Column('user_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_display_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('app_user_id')
    )
    op.create_index(op.f('ix_app_user_user_email'), 'app_user', ['user_email'], unique=True)
    op.create_table('item_group',
    sa.Column('item_group_id', sa.UUID(), nullable=False),
    sa.Column('item_group_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('item_group_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('handling_policy', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('item_group_id')
    )
    op.create_index(op.f('ix_item_group_item_group_code'), 'item_group', ['item_group_code'], unique=True)
    op.create_table('warehouse',
    sa.Column('warehouse_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('warehouse_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('warehouse_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('time_zone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('item_group_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_group_id'], ['item_group.item_group_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('warehouse_id')
    )
    op.create_index(op.f('ix_warehouse_warehouse_code'), 'warehouse', ['warehouse_code'], unique=True)
    op.create_table('audit_log',
    sa.Column('audit_log_id', sa.UUID(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('actor_user_id', sa.Uuid(), nullable=True),
    sa.Column('audited_action', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_table_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_primary_identifier', sa.Uuid(), nullable=False),
    sa.Column('before_state', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('after_state', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('request_ip_address', postgresql.INET(), nullable=True),
    sa.Column('request_user_agent', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('correlation_identifier', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['actor_user_id'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('audit_log_id')
    )
    op.create_index('ix_audit_log_entity', 'audit_log', ['entity_table_name', 'entity_primary_identifier'], unique=False)
    op.create_index('ix_audit_log_recorded_at', 'audit_log', ['recorded_at'], unique=False)
    op.create_table('domain_event',
    sa.Column('domain_event_id', sa.UUID(), nullable=False),
    sa.Column('occurred_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('event_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('aggregate_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('aggregate_identifier', sa.Uuid(), nullable=False),
    sa.Column('event_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('actor_user_id', sa.Uuid(), nullable=True),
    sa.Column('transaction_group', sa.Uuid(), nullable=True),
    sa.Column('correlation_identifier', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['actor_user_id'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('domain_event_id')
    )
    op.create_index('ix_domain_event_aggregate', 'domain_event', ['aggregate_type', 'aggregate_identifier'], unique=False)
    op.create_index('ix_domain_event_occurred_at', 'domain_event', ['occurred_at'], unique=False)
    op.create_table('item',
    sa.Column('item_id', sa.UUID(), nullable=False),
    sa.Column('stock_keeping_unit', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('item_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('unit_of_measure', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('barcode_value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gross_weight_kilograms', sa.Numeric(scale=3), nullable=True),
    sa.Column('volume_cubic_meters', sa.Numeric(scale=4), nullable=True),
    sa.Column('is_lot_tracked', sa.Boolean(), nullable=False),
    sa.Column('is_serial_number_tracked', sa.Boolean(), nullable=False),
    sa.Column('item_group_id', sa.Uuid(), nullable=False),
    sa.Column('item_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("item_status IN ('active', 'archived')", name='ck_item_status'),
    sa.ForeignKeyConstraint(['item_group_id'], ['item_group.item_group_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_index(op.f('ix_item_stock_keeping_unit'), 'item', ['stock_keeping_unit'], unique=True)
    op.create_table('media_asset',
    sa.Column('media_asset_id', sa.UUID(), nullable=False),
    sa.Column('original_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content_sha256', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('byte_size', sa.Integer(), nullable=False),
    sa.Column('storage_backend', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('storage_bucket', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('storage_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stored_bytes', sa.LargeBinary(), nullable=True),
    sa.Column('is_immutable', sa.Boolean(), nullable=False),
    sa.Column('worm_retention_until', sa.DateTime(), nullable=True),
    sa.Column('technical_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('uploaded_by_user_id', sa.Uuid(), nullable=True),
    sa.CheckConstraint("storage_backend IN ('database', 's3')", name='ck_storage_backend'),
    sa.CheckConstraint('byte_size >= 0', name='ck_byte_size_positive'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('media_asset_id')
    )
    op.create_index(op.f('ix_media_asset_content_sha256'), 'media_asset', ['content_sha256'], unique=True)
    op.create_table('sales_order',
    sa.Column('sales_order_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('sales_order_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('external_sales_channel', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('external_order_identifier', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sales_order_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order_date', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_user_id', sa.Uuid(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("sales_order_status IN ('draft', 'allocated', 'shipped', 'closed')", name='ck_sales_order_status'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['app_user.app_user_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('sales_order_id')
    )
    op.create_index(op.f('ix_sales_order_sales_order_number'), 'sales_order', ['sales_order_number'], unique=True)
    op.create_table('warehouse_access_grant',
    sa.Column('warehouse_access_grant_id', sa.UUID(), nullable=False),
    sa.Column('app_user_id', sa.Uuid(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('scope_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scope_entity_identifier', sa.Uuid(), nullable=True),
    sa.Column('can_read', sa.Boolean(), nullable=False),
    sa.Column('can_write', sa.Boolean(), nullable=False),
    sa.Column('can_approve', sa.Boolean(), nullable=False),
    sa.CheckConstraint("scope_type IN ('warehouse', 'zone', 'bin_location', 'item_group')", name='ck_scope_type'),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.app_user_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('warehouse_access_grant_id'),
    sa.UniqueConstraint('app_user_id', 'warehouse_id', 'scope_type', 'scope_entity_identifier', name='uq_warehouse_access_grant')
    )
    op.create_table('zone',
    sa.Column('zone_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('zone_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('zone_function', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('processing_priority', sa.Integer(), nullable=False),
    sa.CheckConstraint("zone_function IN ('receiving', 'storage', 'picking', 'shipping', 'returns', 'scrap')", name='ck_zone_function'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('zone_id')
    )
    op.create_table('bin_location',
    sa.Column('bin_location_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('zone_id', sa.Uuid(), nullable=False),
    sa.Column('bin_location_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bin_location_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('maximum_weight_kilograms', sa.Numeric(scale=3), nullable=True),
    sa.Column('maximum_volume_cubic_meters', sa.Numeric(scale=4), nullable=True),
    sa.Column('is_pick_face', sa.Boolean(), nullable=False),
    sa.CheckConstraint("bin_location_type IN ('pallet', 'shelf', 'flow_rack', 'staging')", name='ck_bin_location_type'),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.ForeignKeyConstraint(['zone_id'], ['zone.zone_id'], ),
    sa.PrimaryKeyConstraint('bin_location_id'),
    sa.UniqueConstraint('warehouse_id', 'bin_location_code', name='uq_bin_location_warehouse_code')
    )
    op.create_table('document_file',
    sa.Column('document_file_id', sa.UUID(), nullable=False),
    sa.Column('document_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('document_identifier', sa.Uuid(), nullable=False),
    sa.Column('media_asset_id', sa.Uuid(), nullable=False),
    sa.Column('document_file_role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('uploaded_by_user_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['media_asset_id'], ['media_asset.media_asset_id'], ),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['app_user.app_user_id'], ),
    sa.PrimaryKeyConstraint('document_file_id')
    )
    op.create_table('item_image',
    sa.Column('item_image_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('media_asset_id', sa.Uuid(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('display_order', sa.Integer(), nullable=False),
    sa.Column('alt_text', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['media_asset_id'], ['media_asset.media_asset_id'], ),
    sa.PrimaryKeyConstraint('item_image_id'),
    sa.UniqueConstraint('item_id', 'media_asset_id', name='uq_item_image')
    )
    op.create_table('lot',
    sa.Column('lot_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('lot_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('manufactured_at', sa.Date(), nullable=True),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('lot_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.PrimaryKeyConstraint('lot_id'),
    sa.UniqueConstraint('item_id', 'lot_code', name='uq_lot_item_code')
    )
    op.create_table('media_derivative',
    sa.Column('media_derivative_id', sa.UUID(), nullable=False),
    sa.Column('media_asset_id', sa.Uuid(), nullable=False),
    sa.Column('derivative_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('byte_size', sa.Integer(), nullable=False),
    sa.Column('storage_backend', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('storage_bucket', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('storage_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('stored_bytes', sa.LargeBinary(), nullable=True),
    sa.Column('pixel_width', sa.Integer(), nullable=True),
    sa.Column('pixel_height', sa.Integer(), nullable=True),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("storage_backend IN ('database', 's3')", name='ck_derivative_storage_backend'),
    sa.ForeignKeyConstraint(['media_asset_id'], ['media_asset.media_asset_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('media_derivative_id'),
    sa.UniqueConstraint('media_asset_id', 'derivative_type', name='uq_media_derivative')
    )
    op.create_table('purchase_recommendation',
    sa.Column('recommendation_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('current_stock', sa.Numeric(scale=3), nullable=False),
    sa.Column('reserved_stock', sa.Numeric(scale=3), nullable=False),
    sa.Column('available_stock', sa.Numeric(scale=3), nullable=False),
    sa.Column('avg_daily_sales', sa.Numeric(scale=3), nullable=True),
    sa.Column('sales_velocity_trend', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('days_of_stock_remaining', sa.Integer(), nullable=True),
    sa.Column('recommended_order_quantity', sa.Numeric(scale=3), nullable=True),
    sa.Column('recommended_order_date', sa.Date(), nullable=True),
    sa.Column('priority_score', sa.Numeric(scale=2), nullable=True),
    sa.Column('recommendation_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('seasonal_factor', sa.Numeric(scale=2), nullable=True),
    sa.Column('calculated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint("sales_velocity_trend IN ('increasing', 'stable', 'decreasing')", name='ck_sales_velocity_trend'),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.create_table('return_order',
    sa.Column('return_order_id', sa.UUID(), nullable=False),
    sa.Column('related_sales_order_id', sa.Uuid(), nullable=True),
    sa.Column('return_reference', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('return_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('return_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_user_id', sa.Uuid(), nullable=True),
    sa.CheckConstraint("return_status IN ('received', 'inspected', 'closed')", name='ck_return_status'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['app_user.app_user_id'], ),
    sa.ForeignKeyConstraint(['related_sales_order_id'], ['sales_order.sales_order_id'], ),
    sa.PrimaryKeyConstraint('return_order_id')
    )
    op.create_table('sales_order_line',
    sa.Column('sales_order_line_id', sa.UUID(), nullable=False),
    sa.Column('sales_order_id', sa.Uuid(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('ordered_quantity', sa.Numeric(scale=3), nullable=False),
    sa.Column('unit_price', sa.Numeric(scale=2), nullable=True),
    sa.Column('allocated_quantity', sa.Numeric(scale=3), nullable=False),
    sa.Column('shipped_quantity', sa.Numeric(scale=3), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['sales_order_id'], ['sales_order.sales_order_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('sales_order_line_id')
    )
    op.create_table('return_order_line',
    sa.Column('return_order_line_id', sa.UUID(), nullable=False),
    sa.Column('return_order_id', sa.Uuid(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('returned_quantity', sa.Numeric(scale=3), nullable=False),
    sa.Column('inspection_decision', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('decision_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.CheckConstraint("inspection_decision IN ('return_to_stock', 'scrap', 'repair')", name='ck_inspection_decision'),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['return_order_id'], ['return_order.return_order_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('return_order_line_id')
    )
    op.create_table('sales_analytics',
    sa.Column('sales_analytics_id', sa.UUID(), nullable=False),
    sa.Column('sales_order_id', sa.Uuid(), nullable=False),
    sa.Column('sales_order_line_id', sa.Uuid(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('quantity_sold', sa.Numeric(scale=3), nullable=False),
    sa.Column('unit_sale_price', sa.Numeric(scale=2), nullable=False),
    sa.Column('unit_cost_price', sa.Numeric(scale=2), nullable=True),
    sa.Column('total_revenue', sa.Numeric(scale=2), nullable=False),
    sa.Column('total_cost', sa.Numeric(scale=2), nullable=True),
    sa.Column('gross_margin', sa.Numeric(scale=2), nullable=True),
    sa.Column('margin_percentage', sa.Numeric(scale=2), nullable=True),
    sa.Column('marketplace_channel', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('external_order_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sale_date', sa.DateTime(), nullable=False),
    sa.Column('season_quarter', sa.Integer(), nullable=True),
    sa.Column('day_of_week', sa.Integer(), nullable=True),
    sa.Column('days_in_stock', sa.Integer(), nullable=True),
    sa.Column('stock_turnover_rate', sa.Numeric(scale=4), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['sales_order_id'], ['sales_order.sales_order_id'], ),
    sa.ForeignKeyConstraint(['sales_order_line_id'], ['sales_order_line.sales_order_line_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('sales_analytics_id')
    )
    op.create_index('ix_sales_analytics_item_id', 'sales_analytics', ['item_id'], unique=False)
    op.create_index('ix_sales_analytics_marketplace', 'sales_analytics', ['marketplace_channel'], unique=False)
    op.create_index('ix_sales_analytics_sale_date', 'sales_analytics', ['sale_date'], unique=False)
    op.create_table('serial_number',
    sa.Column('serial_number_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('serial_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lot_id', sa.Uuid(), nullable=True),
    sa.Column('serial_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.CheckConstraint("serial_status IN ('in_stock', 'shipped', 'scrapped')", name='ck_serial_status'),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lot.lot_id'], ),
    sa.PrimaryKeyConstraint('serial_number_id')
    )
    op.create_index(op.f('ix_serial_number_serial_code'), 'serial_number', ['serial_code'], unique=True)
    op.create_table('inventory_reservation',
    sa.Column('inventory_reservation_id', sa.UUID(), nullable=False),
    sa.Column('sales_order_id', sa.Uuid(), nullable=False),
    sa.Column('sales_order_line_id', sa.Uuid(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('bin_location_id', sa.Uuid(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('lot_id', sa.Uuid(), nullable=True),
    sa.Column('serial_number_id', sa.Uuid(), nullable=True),
    sa.Column('reserved_quantity', sa.Numeric(scale=3), nullable=False),
    sa.Column('reservation_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("reservation_status IN ('active', 'released', 'consumed')", name='ck_reservation_status'),
    sa.ForeignKeyConstraint(['bin_location_id'], ['bin_location.bin_location_id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lot.lot_id'], ),
    sa.ForeignKeyConstraint(['sales_order_id'], ['sales_order.sales_order_id'], ),
    sa.ForeignKeyConstraint(['sales_order_line_id'], ['sales_order_line.sales_order_line_id'], ),
    sa.ForeignKeyConstraint(['serial_number_id'], ['serial_number.serial_number_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('inventory_reservation_id')
    )
    op.create_table('stock_balance',
    sa.Column('stock_balance_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('bin_location_id', sa.Uuid(), nullable=False),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('lot_id', sa.Uuid(), nullable=True),
    sa.Column('serial_number_id', sa.Uuid(), nullable=True),
    sa.Column('quantity_on_hand', sa.Numeric(scale=3), nullable=False),
    sa.Column('quantity_reserved', sa.Numeric(scale=3), nullable=False),
    sa.Column('last_movement_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bin_location_id'], ['bin_location.bin_location_id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lot.lot_id'], ),
    sa.ForeignKeyConstraint(['serial_number_id'], ['serial_number.serial_number_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('stock_balance_id'),
    sa.UniqueConstraint('warehouse_id', 'bin_location_id', 'item_id', 'lot_id', 'serial_number_id', name='uq_stock_balance_unique')
    )
    op.create_index('ix_stock_balance_bin_location', 'stock_balance', ['bin_location_id'], unique=False)
    op.create_index('ix_stock_balance_warehouse_item', 'stock_balance', ['warehouse_id', 'item_id'], unique=False)
    op.create_table('stock_movement',
    sa.Column('stock_movement_id', sa.UUID(), nullable=False),
    sa.Column('occurred_at', sa.DateTime(), nullable=False),
    sa.Column('warehouse_id', sa.Uuid(), nullable=False),
    sa.Column('source_bin_location_id', sa.Uuid(), nullable=True),
    sa.Column('destination_bin_location_id', sa.Uuid(), nullable=True),
    sa.Column('item_id', sa.Uuid(), nullable=False),
    sa.Column('lot_id', sa.Uuid(), nullable=True),
    sa.Column('serial_number_id', sa.Uuid(), nullable=True),
    sa.Column('moved_quantity', sa.Numeric(scale=3), nullable=False),
    sa.Column('unit_of_measure', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('movement_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('document_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('document_identifier', sa.Uuid(), nullable=True),
    sa.Column('actor_user_id', sa.Uuid(), nullable=True),
    sa.Column('trigger_source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('transaction_group', sa.Uuid(), nullable=True),
    sa.Column('correlation_identifier', sa.Uuid(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.CheckConstraint("movement_reason IN ('goods_receipt', 'sales_issue', 'internal_transfer', 'manual_adjustment', 'return_receipt', 'return_scrap', 'inventory_adjustment')", name='ck_movement_reason'),
    sa.CheckConstraint('moved_quantity != 0', name='ck_moved_quantity_not_zero'),
    sa.ForeignKeyConstraint(['actor_user_id'], ['app_user.app_user_id'], ),
    sa.ForeignKeyConstraint(['destination_bin_location_id'], ['bin_location.bin_location_id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['item.item_id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lot.lot_id'], ),
    sa.ForeignKeyConstraint(['serial_number_id'], ['serial_number.serial_number_id'], ),
    sa.ForeignKeyConstraint(['source_bin_location_id'], ['bin_location.bin_location_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('stock_movement_id')
    )
    op.create_index('ix_stock_movement_correlation_id', 'stock_movement', ['correlation_identifier'], unique=False)
    op.create_index('ix_stock_movement_item_id', 'stock_movement', ['item_id'], unique=False)
    op.create_index('ix_stock_movement_occurred_at', 'stock_movement', ['occurred_at'], unique=False)
    op.create_index('ix_stock_movement_warehouse_id', 'stock_movement', ['warehouse_id'], unique=False)
    op.create_table('movement_attachment',
    sa.Column('movement_attachment_id', sa.UUID(), nullable=False),
    sa.Column('stock_movement_id', sa.Uuid(), nullable=False),
    sa.Column('media_asset_id', sa.Uuid(), nullable=False),
    sa.Column('attachment_role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['media_asset_id'], ['media_asset.media_asset_id'], ),
    sa.ForeignKeyConstraint(['stock_movement_id'], ['stock_movement.stock_movement_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('movement_attachment_id'),
    sa.UniqueConstraint('stock_movement_id', 'media_asset_id', 'attachment_role', name='uq_movement_attachment')
    )
    
    # Create celery schema for beat tables
    op.execute("CREATE SCHEMA IF NOT EXISTS celery_schema")
    
    # Note: Celery Beat tables will be created automatically by sqlalchemy_celery_beat
    # when the beat scheduler starts. The tables are created in the celery_schema
    # as defined in the models with schema='celery_schema' table args.
    
    # New flexible permission system
    op.create_table('permission',
        sa.Column('permission_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('app_user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('resource_type', sa.String(), nullable=False),
        sa.Column('resource_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('permission_level', sa.String(), nullable=False),
        sa.Column('granted_by', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('granted_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.text('true')),
        sa.CheckConstraint("resource_type IN ('item_group', 'warehouse', 'audit', 'marketplace_accounts', 'system')", name='ck_resource_type'),
        sa.CheckConstraint("permission_level IN ('read', 'write', 'admin', 'owner')", name='ck_permission_level'),
        sa.ForeignKeyConstraint(['app_user_id'], ['app_user.app_user_id'], ),
        sa.ForeignKeyConstraint(['granted_by'], ['app_user.app_user_id'], ),
        sa.PrimaryKeyConstraint('permission_id'),
        sa.UniqueConstraint('app_user_id', 'resource_type', 'resource_id', name='uq_user_resource_permission')
    )
    op.create_index('ix_permission_app_user_id', 'permission', ['app_user_id'])
    op.create_index('ix_permission_resource', 'permission', ['resource_type', 'resource_id'])
    op.create_index('ix_permission_active', 'permission', ['is_active'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop permission table
    op.drop_index('ix_permission_active', table_name='permission')
    op.drop_index('ix_permission_resource', table_name='permission')
    op.drop_index('ix_permission_app_user_id', table_name='permission')
    op.drop_table('permission')
    
    # Drop celery schema (this will cascade and drop all celery beat tables)
    op.execute("DROP SCHEMA IF EXISTS celery_schema CASCADE")
    
    op.drop_table('movement_attachment')
    op.drop_index('ix_stock_movement_warehouse_id', table_name='stock_movement')
    op.drop_index('ix_stock_movement_occurred_at', table_name='stock_movement')
    op.drop_index('ix_stock_movement_item_id', table_name='stock_movement')
    op.drop_index('ix_stock_movement_correlation_id', table_name='stock_movement')
    op.drop_table('stock_movement')
    op.drop_index('ix_stock_balance_warehouse_item', table_name='stock_balance')
    op.drop_index('ix_stock_balance_bin_location', table_name='stock_balance')
    op.drop_table('stock_balance')
    op.drop_table('inventory_reservation')
    op.drop_index(op.f('ix_serial_number_serial_code'), table_name='serial_number')
    op.drop_table('serial_number')
    op.drop_index('ix_sales_analytics_sale_date', table_name='sales_analytics')
    op.drop_index('ix_sales_analytics_marketplace', table_name='sales_analytics')
    op.drop_index('ix_sales_analytics_item_id', table_name='sales_analytics')
    op.drop_table('sales_analytics')
    op.drop_table('return_order_line')
    op.drop_table('sales_order_line')
    op.drop_table('return_order')
    op.drop_table('purchase_recommendation')
    op.drop_table('media_derivative')
    op.drop_table('lot')
    op.drop_table('item_image')
    op.drop_table('document_file')
    op.drop_table('bin_location')
    op.drop_table('zone')
    op.drop_table('warehouse_access_grant')
    op.drop_index(op.f('ix_sales_order_sales_order_number'), table_name='sales_order')
    op.drop_table('sales_order')
    op.drop_index(op.f('ix_media_asset_content_sha256'), table_name='media_asset')
    op.drop_table('media_asset')
    op.drop_index(op.f('ix_item_stock_keeping_unit'), table_name='item')
    op.drop_table('item')
    op.drop_index('ix_domain_event_occurred_at', table_name='domain_event')
    op.drop_index('ix_domain_event_aggregate', table_name='domain_event')
    op.drop_table('domain_event')
    op.drop_index('ix_audit_log_recorded_at', table_name='audit_log')
    op.drop_index('ix_audit_log_entity', table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index(op.f('ix_warehouse_warehouse_code'), table_name='warehouse')
    op.drop_table('warehouse')
    op.drop_index(op.f('ix_item_group_item_group_code'), table_name='item_group')
    op.drop_table('item_group')
    op.drop_index(op.f('ix_app_user_user_email'), table_name='app_user')
    op.drop_table('app_user')
    # ### end Alembic commands ###
