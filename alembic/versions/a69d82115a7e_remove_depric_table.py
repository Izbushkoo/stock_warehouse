"""remove depric table

Revision ID: a69d82115a7e
Revises: f1a2b3c4d5e6
Create Date: 2025-09-29 13:25:50.046009

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel import SQLModel
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a69d82115a7e'
down_revision = 'f1a2b3c4d5e6'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('warehouse_access_grant')
    op.alter_column('item', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('item_group', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('item_group', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('permission', 'granted_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_permission_active'), table_name='permission')
    op.drop_index(op.f('ix_permission_app_user_id'), table_name='permission')
    op.drop_index(op.f('ix_permission_resource'), table_name='permission')
    op.add_column('return_order', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('return_order', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('sales_order', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('warehouse', 'item_group_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('warehouse', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('warehouse', 'deleted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('warehouse', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('warehouse', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('warehouse', 'item_group_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('sales_order', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('return_order', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_column('return_order', 'updated_at')
    op.create_index(op.f('ix_permission_resource'), 'permission', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('ix_permission_app_user_id'), 'permission', ['app_user_id'], unique=False)
    op.create_index(op.f('ix_permission_active'), 'permission', ['is_active'], unique=False)
    op.alter_column('permission', 'granted_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('item_group', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('item_group', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('item', 'deleted_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.create_table('warehouse_access_grant',
    sa.Column('warehouse_access_grant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('app_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('warehouse_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('scope_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('scope_entity_identifier', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('can_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('can_write', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('can_approve', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.CheckConstraint("scope_type::text = ANY (ARRAY['warehouse'::character varying, 'zone'::character varying, 'bin_location'::character varying, 'item_group'::character varying]::text[])", name=op.f('ck_scope_type')),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.app_user_id'], name=op.f('warehouse_access_grant_app_user_id_fkey')),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouse.warehouse_id'], name=op.f('warehouse_access_grant_warehouse_id_fkey')),
    sa.PrimaryKeyConstraint('warehouse_access_grant_id', name=op.f('warehouse_access_grant_pkey')),
    sa.UniqueConstraint('app_user_id', 'warehouse_id', 'scope_type', 'scope_entity_identifier', name=op.f('uq_warehouse_access_grant'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
