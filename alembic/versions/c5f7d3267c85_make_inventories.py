"""make inventories

Revision ID: c5f7d3267c85
Revises: 0001_create_core_tables
Create Date: 2025-09-28 15:54:13.461261

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel import SQLModel
import sqlmodel


# revision identifiers, used by Alembic.
revision = 'c5f7d3267c85'
down_revision = '0001_create_core_tables'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('inventories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventories_name'), 'inventories', ['name'], unique=False)
    op.create_table('inventory_accesses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inventory_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('granted_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['granted_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['inventory_id'], ['inventories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('inventory_id', 'user_id', name='uq_inventory_access')
    )
    op.create_table('inventory_memberships',
    sa.Column('inventory_id', sa.Integer(), nullable=False),
    sa.Column('inventory_item_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['inventory_id'], ['inventories.id'], ),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_items.id'], ),
    sa.PrimaryKeyConstraint('inventory_id', 'inventory_item_id')
    )
    op.drop_constraint(op.f('audit_logs_product_id_fkey'), 'audit_logs', type_='foreignkey')
    op.drop_constraint(op.f('audit_logs_warehouse_id_fkey'), 'audit_logs', type_='foreignkey')
    op.drop_constraint(op.f('audit_logs_inventory_item_id_fkey'), 'audit_logs', type_='foreignkey')
    op.drop_constraint(op.f('audit_logs_actor_id_fkey'), 'audit_logs', type_='foreignkey')
    op.create_foreign_key(None, 'audit_logs', 'users', ['actor_id'], ['id'])
    op.create_foreign_key(None, 'audit_logs', 'products', ['product_id'], ['id'])
    op.create_foreign_key(None, 'audit_logs', 'warehouses', ['warehouse_id'], ['id'])
    op.create_foreign_key(None, 'audit_logs', 'inventory_items', ['inventory_item_id'], ['id'])
    op.drop_index(op.f('ix_inventory_items_product_id'), table_name='inventory_items')
    op.drop_index(op.f('ix_inventory_items_warehouse_id'), table_name='inventory_items')
    op.drop_constraint(op.f('inventory_items_warehouse_id_fkey'), 'inventory_items', type_='foreignkey')
    op.drop_constraint(op.f('inventory_items_product_id_fkey'), 'inventory_items', type_='foreignkey')
    op.create_foreign_key(None, 'inventory_items', 'products', ['product_id'], ['id'])
    op.create_foreign_key(None, 'inventory_items', 'warehouses', ['warehouse_id'], ['id'])
    op.create_index(op.f('ix_permissions_action'), 'permissions', ['action'], unique=False)
    op.create_index(op.f('ix_permissions_scope'), 'permissions', ['scope'], unique=False)
    op.drop_constraint(op.f('products_sku_key'), 'products', type_='unique')
    op.drop_constraint(op.f('role_permissions_permission_id_fkey'), 'role_permissions', type_='foreignkey')
    op.drop_constraint(op.f('role_permissions_role_id_fkey'), 'role_permissions', type_='foreignkey')
    op.create_foreign_key(None, 'role_permissions', 'permissions', ['permission_id'], ['id'])
    op.create_foreign_key(None, 'role_permissions', 'roles', ['role_id'], ['id'])
    op.drop_constraint(op.f('user_roles_role_id_fkey'), 'user_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_roles_user_id_fkey'), 'user_roles', type_='foreignkey')
    op.create_foreign_key(None, 'user_roles', 'roles', ['role_id'], ['id'])
    op.create_foreign_key(None, 'user_roles', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('warehouse_permissions_user_id_fkey'), 'warehouse_permissions', type_='foreignkey')
    op.drop_constraint(op.f('warehouse_permissions_permission_id_fkey'), 'warehouse_permissions', type_='foreignkey')
    op.drop_constraint(op.f('warehouse_permissions_warehouse_id_fkey'), 'warehouse_permissions', type_='foreignkey')
    op.create_foreign_key(None, 'warehouse_permissions', 'warehouses', ['warehouse_id'], ['id'])
    op.create_foreign_key(None, 'warehouse_permissions', 'permissions', ['permission_id'], ['id'])
    op.create_foreign_key(None, 'warehouse_permissions', 'users', ['user_id'], ['id'])
    op.drop_constraint(op.f('warehouses_code_key'), 'warehouses', type_='unique')
    op.create_index(op.f('ix_warehouses_name'), 'warehouses', ['name'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_warehouses_name'), table_name='warehouses')
    op.create_unique_constraint(op.f('warehouses_code_key'), 'warehouses', ['code'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'warehouse_permissions', type_='foreignkey')
    op.drop_constraint(None, 'warehouse_permissions', type_='foreignkey')
    op.drop_constraint(None, 'warehouse_permissions', type_='foreignkey')
    op.create_foreign_key(op.f('warehouse_permissions_warehouse_id_fkey'), 'warehouse_permissions', 'warehouses', ['warehouse_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('warehouse_permissions_permission_id_fkey'), 'warehouse_permissions', 'permissions', ['permission_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('warehouse_permissions_user_id_fkey'), 'warehouse_permissions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.create_foreign_key(op.f('user_roles_user_id_fkey'), 'user_roles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('user_roles_role_id_fkey'), 'user_roles', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.create_foreign_key(op.f('role_permissions_role_id_fkey'), 'role_permissions', 'roles', ['role_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('role_permissions_permission_id_fkey'), 'role_permissions', 'permissions', ['permission_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('products_sku_key'), 'products', ['sku'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_permissions_scope'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_action'), table_name='permissions')
    op.drop_constraint(None, 'inventory_items', type_='foreignkey')
    op.drop_constraint(None, 'inventory_items', type_='foreignkey')
    op.create_foreign_key(op.f('inventory_items_product_id_fkey'), 'inventory_items', 'products', ['product_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('inventory_items_warehouse_id_fkey'), 'inventory_items', 'warehouses', ['warehouse_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_inventory_items_warehouse_id'), 'inventory_items', ['warehouse_id'], unique=False)
    op.create_index(op.f('ix_inventory_items_product_id'), 'inventory_items', ['product_id'], unique=False)
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.create_foreign_key(op.f('audit_logs_actor_id_fkey'), 'audit_logs', 'users', ['actor_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('audit_logs_inventory_item_id_fkey'), 'audit_logs', 'inventory_items', ['inventory_item_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('audit_logs_warehouse_id_fkey'), 'audit_logs', 'warehouses', ['warehouse_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('audit_logs_product_id_fkey'), 'audit_logs', 'products', ['product_id'], ['id'], ondelete='SET NULL')
    op.drop_table('inventory_memberships')
    op.drop_table('inventory_accesses')
    op.drop_index(op.f('ix_inventories_name'), table_name='inventories')
    op.drop_table('inventories')
    # ### end Alembic commands ###
